/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    pages: Page;
    media: Media;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    header: Header;
    footer: Footer;
    settings: Setting;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  name?: string | null;
  roles?: ('admin' | 'user')[] | null;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  slug: string;
  title?: string | null;
  layout?:
    | (
        | HomeBlock
        | QuoteBlock
        | CTACenteredBlock
        | CTAWithSplitContentAndButtonBlock
        | CTAWithSplitContentAndImageBlock
        | TestimonialBlock
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "HomeBlock".
 */
export interface HomeBlock {
  displayText?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'home-block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "QuoteBlock".
 */
export interface QuoteBlock {
  quoteHeader: string;
  quoteText?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'quote-block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTACenteredBlock".
 */
export interface CTACenteredBlock {
  sectionTitleAndDescription: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
    | null;
  backgroundColor: string;
  textColor: string;
  sectionTitleAndDescription_html?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta-centered-block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTAWithSplitContentAndButtonBlock".
 */
export interface CTAWithSplitContentAndButtonBlock {
  sectionTitleAndDescription: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
    | null;
  backgroundColor: string;
  textColor: string;
  sectionTitleAndDescription_html?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta-with-split-content-and-button-block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CTAWithSplitContentAndImageBlock".
 */
export interface CTAWithSplitContentAndImageBlock {
  sectionTitleAndDescription: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?: {
            relationTo: 'pages';
            value: string | Page;
          } | null;
          url?: string | null;
          label: string;
          appearance?: ('primary' | 'secondary') | null;
        };
        id?: string | null;
      }[]
    | null;
  backgroundColor: string;
  textColor: string;
  image: string | Media;
  sectionTitleAndDescription_html?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta-with-split-content-and-image-block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  caption_html?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TestimonialBlock".
 */
export interface TestimonialBlock {
  title: string;
  reviews: {
    rating?: number | null;
    heading: string;
    text: string;
    customerName?: string | null;
    id?: string | null;
  }[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'testimonial-block';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "header".
 */
export interface Header {
  id: string;
  logo?: string | Media | null;
  storeName: string;
  navLinks: {
    title: string;
    reference?: {
      relationTo: 'pages';
      value: string | Page;
    } | null;
    id?: string | null;
  }[];
  showLoginButton: boolean;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  logo?: string | Media | null;
  socialProfiles?: {
    facebook?: string | null;
    twitter?: string | null;
    instagram?: string | null;
    youtube?: string | null;
    email?: string | null;
    phone?: string | null;
  };
  footerLinks: {
    title: string;
    links: {
      title: string;
      reference?: {
        relationTo: 'pages';
        value: string | Page;
      } | null;
      id?: string | null;
    }[];
    id?: string | null;
  }[];
  copyright: string;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  reference?: {
    relationTo: 'pages';
    value: string | Page;
  } | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}

declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}
